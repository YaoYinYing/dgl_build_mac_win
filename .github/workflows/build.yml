name: Build DGL from source

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_version:
        description: 'DGL version tag (e.g. v2.2.1). Leave empty to use latest release from upstream.'
        required: false
        default: ''

env:
    PYTHON_VERSION: '3.10'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        arch: [x64, arm64]
        cuda: [false, true]


    env:
      DGL_BUILD_CPU: "ON"
      DGL_BUILD_CUDA: ${{ matrix.cuda }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Clone DGL repo with submodules
        run: |
          git clone  \
            --recurse-submodules https://github.com/dmlc/dgl.git dgl-src
          cd dgl-src
          git submodule update --init --recursive

        
      - name: Determine DGL version
        id: dgl_version
        run: |
          if [ -n "${{ github.event.inputs.build_version }}" ]; then
            TAG=${{ github.event.inputs.build_version }}
            echo Using Tag `$TAG` from input
          else
            TAG=$(git tag -l --sort=-taggerdate |head -1)
            echo Using Tag $TAG from upstream release
          fi
          # pin to output as 
          # ${{ steps.dgl_version.outputs.TAG }}
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
        working-directory: dgl-src
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake
          xcode-select --install || true

      - name: Install Dependencies (Windows, CPU-only)
        if: runner.os == 'Windows' && env.DGL_BUILD_CUDA == 'false'
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y
          choco install visualstudio2019buildtools -y

      - name: Install Dependencies (Windows, CUDA)
        if: runner.os == 'Windows' && env.DGL_BUILD_CUDA == 'true'
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y
          choco install visualstudio2019buildtools -y
          choco install cuda --version=11.8 -y

      - name: Build DGL
        run: |
          mkdir build && cd build
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            cmake -DUSE_LIBXSMM=OFF -DUSE_OPENMP=OFF ..
            cmake --build . --config Release -- -j$(sysctl -n hw.ncpu)
          else
            cmake -DDGL_EXPORTS -DCMAKE_CONFIGURATION_TYPES=Release -DDMLC_FORCE_SHARED_CRT=ON ..
            cmake --build . --config Release -- /m
          fi
        working-directory: dgl-src

      - name: Build Python Wheel
        run: |
          cd python
          python setup.py bdist_wheel
        working-directory: dgl-src

      - name: Package Artifacts
        run: |
          TAG="${{ steps.dgl_version.outputs.TAG }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.cuda && '-cuda' || '' }}"
          mkdir -p artifacts
          cp python/dist/dgl*.whl artifacts/
          cd artifacts
          zip -r dgl-${TAG}.zip .
        working-directory: dgl-src

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dgl-${{ steps.dgl_version.outputs.TAG }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.cuda && '-cuda' || '' }}
          path: dgl-src/artifacts/dgl-*.zip
